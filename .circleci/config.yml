version: 2.1


orbs:
  aws-cli: circleci/aws-cli@4.0
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  lint:
    docker:
      - image: cimg/node:18.4
    steps:
      - checkout
      - run: npm install
      - run: npm run lint

  deploy:
    docker:
      - image: cimg/node:18.4
    environment:
      CLUSTER_NAME: capstone-project # this should be already created otherwise this jobs won't work
      IMAGE_NAME: udacity-capstone # there should exist an ECR repository with this name
    steps:
      - checkout
      # add AWS ssh key
      - add_ssh_keys:
          fingerprints:
            - "43:c4:8c:64:a0:ca:d0:0d:74:52:59:ea:fe:4c:e9:5c"
      
      # install AWS CLI
      - aws-cli/setup
      - setup_remote_docker
      - run:
          name: Build and push docker image
          command: |
            # Build and tag docker image
            docker buildx build --platform linux/amd64 -t ${IMAGE_NAME} .
            docker tag udacity-capstone:latest ${ECR_REPOSITORY}/${IMAGE_NAME}:latest

            # list docker images
            docker images

            # login to AWS ECR
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
            # push docker image to AWS ECR
            docker push ${ECR_REPOSITORY}/${IMAGE_NAME}:latest
      - kubernetes/install-kubectl
      # Configure kubectl to access the cluster
      - run:
          name: Configure kubectl
          command: |
            aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${CLUSTER_NAME}
            kubectl get svc
      # Create a deployment on the cluster
      - run:
          name: Create a new deployment
          command: |
            kubectl create deployment "$IMAGE_NAME-${CIRCLE_WORKFLOW_ID:0:7}" --port=3000 --image=${ECR_REPOSITORY}/${IMAGE_NAME}:latest
            kubectl label deployment "$IMAGE_NAME-${CIRCLE_WORKFLOW_ID:0:7}" version="${CIRCLE_WORKFLOW_ID:0:7}"
            kubectl get pods
      # Smoke test the new deployment
      - run:
          name: Smoke test the new deployment
          command: |
            kubectl exec deployment/"$IMAGE_NAME-${CIRCLE_WORKFLOW_ID:0:7}" -- curl -s http://localhost:3000
      # If the smoke test passes, update the service to point to the new deployment
      - run:
          name: Update the service to point to the new deployment
          command: |
            kubectl expose deployment/"$IMAGE_NAME-${CIRCLE_WORKFLOW_ID:0:7}" --port=5000 --target-port=3000
            kubectl get svc
      # Delete the old deployment
      - run:
          name: Delete the old deployment
          command: |
            # Get old deployments that are not equal to the current deployment
            OLD_DEPLOYMENTS=$(kubectl get deployments -l version!="${CIRCLE_WORKFLOW_ID:0:7}" -o jsonpath='{.items[*].metadata.name}')
            echo OLD_DEPLOYMENTS=$OLD_DEPLOYMENTS

            # Delete old deployments
            kubectl delete deployments $OLD_DEPLOYMENTS

            kubectl get deployments
            kubectl get services
workflows:
  default:
    jobs:
      # - lint
      - deploy
          # requires:
          #   - lint

      